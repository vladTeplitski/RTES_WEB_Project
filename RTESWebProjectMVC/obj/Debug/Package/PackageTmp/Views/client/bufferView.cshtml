<link href="~/Content/algCSS.css" rel="stylesheet" />

<script src="~/Scripts/jquery-2.1.4.intellisense.js"></script>
<script src="~/Scripts/jquery-2.1.4.js"></script>
<script src="~/Scripts/jquery-2.1.4.min.js"></script>
<script src="~/Scripts/Lib/jquery.unobtrusive-ajax.js"></script>
<script src="~/Scripts/Lib/jquery.unobtrusive-ajax.min.js"></script>

<link href="~/Content/bootstrap.css" rel="stylesheet" />
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />

<script src="~/Scripts/Functions/funcLib.js"></script>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8jxvHszW9AW7xdcB7Ds-f5PPIRGfhmHw&callback=initMap">
</script>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&v=3&libraries=geometry"></script>



<div class="algContainer">

    <div class="progressBox">
        <div style="cursor:default;padding:10px;color:#F3F3F3">Calculating service requests...</div>
        <div class="loader" style="margin:auto;"></div>

        <br />

        <!--Message to user, if the algorithm couldnt find efficient option-->
        <div class="alertNoDriver" ID="noDriverFound">
            <div class="alert alert-danger panelDanger2" >
                Due to workload, a truck driver was not assigned.
                Please call: *5547!
            </div>
        </div>
        


        <Button type="submit" id="redirectBack" Text="Finish Assign" OnClick="location.href='@Url.Action("client", "client")'" class="btn btn-default btnRedirectClient" >Finish Assigning</Button>
    </div>
    


    <!--[[[[[[[[  DEBUG SECTION   ]]]]]]]]-->

    <!-- use only for algorithm debugging.-->
    <!-- Debug section allow developer watch all details and data and follow the javascript & C# correct bind-->
    
    <!-- Apply by changing the id="testLngLatClientSide" css display property from "none" to "inline" -->
    
    <br />
    <div id="testLngLatClientSide" style="position:absolute;top:400px;width:700px;height:auto;color:#4AFF12;background-color:black;border:1px solid black;display:none;">
        <span style="color:red;"><b>Algorithm debug mode</b></span>
        <br /><br />

        <div id="test1"></div><br />
        <div id="test2"></div><br />
        <div id="test3"></div><br />
        <div id="test4"></div><br />
        <div id="test5"></div><br />
        <div id="test6"></div><br />
        <div id="test7"></div><br />
        <div id="test8"></div><br />
        <div id="test9"></div><br />
        <br /><br />
        <div id="testAlg1"></div><br />
        <div id="testAlg2"></div><br />
        <div id="testAlg3"></div><br />
        <div id="testAlg4"></div><br />

    </div>

    <!--[[[[[[[[  END DEBUG SECTION   ]]]]]]]]-->


    <br />

    <!-- Start - Truck drivers Algorithm - Location services & efficient assigning-->

    @using RTESWebProjectMVC.Models
    @model truckDriverList[]

    @{

        if (Model != null)
        {

            <script>
                var clientLng =  '@(Session["clientLng"])';
                var clientLat = '@(Session["clientLat"])';
                var clientReportId = '@(Session["clientRepIdNOW"])';

                var cnt = '@(Model.Length)'
                var i;

                document.getElementById("test1").innerHTML = "Number of drivers ($cnt) = "+cnt;
                document.getElementById("test2").innerHTML = "<br>"+"Client coordinates: Lng:" + clientLng + " Lat:" + clientLat + "<br><br>";

                var para = [];
                var para3 = [];
                var para4 = [];
                var para5 = [];
                var para700 = [];

                var driversArray = [];  // init an array for objects

                function driverObj() { // init object for storing all drivers' details
                    this.driverId = null;
                    this.lan = null;
                    this.lng = null;
                    this.tasksCount = null;
                    this.cargo = null;
                    this.reportId = [];
                    this.tasksLat = [];
                    this.tasksLng = [];
                    this.tasksDestLat = [];
                    this.tasksDestLng = [];
                    this.distanceResult =null;
                    this.prior1 = null;
                    this.prior1Role= null;
                    this.prior2 = null;
                    this.prior2Role= null;
                    this.prior3 = null;
                    this.prior3Role= null;
                    this.prior4 = null;
                    this.prior4Role= null;
                    this.prior5 = null;
                    this.prior5Role= null;
                    this.prior6 = null;
                    this.prior6Role= null;
                };

                var min=0;
                var truckDriverId;
                var i=0 ;

                @foreach (var item in Model)  // switch to C#
            {
             <text>  // switch to javascript

                driversArray.push(new driverObj()); //create array of objects

                driversArray[i].driverId = @(item.driverId);
                driversArray[i].lan = @(item.lan);
                driversArray[i].lng = @(item.lng);
                driversArray[i].cargo = @(item.cargo);

                driversArray[i].prior1= 0; 
                driversArray[i].prior2= 0;
                driversArray[i].prior3= 0;
                driversArray[i].prior4= 0;
                driversArray[i].prior5= 0;
                driversArray[i].prior6= 0;
                driversArray[i].prior1Role= 0;
                driversArray[i].prior2Role= 0;
                driversArray[i].prior3Role= 0;
                driversArray[i].prior4Role= 0;
                driversArray[i].prior5Role= 0;
                driversArray[i].prior6Role= 0;

                driversArray[i].tasksCount = @(item.tasksCount);

                para3[i] = document.createElement("div");
                para3[i].innerHTML = "Driver id:"+i+"_"+ driversArray[i].driverId + "__Driver Lat:" + driversArray[i].lan + "__Driver Lng:" + driversArray[i].lng + "__Tasks Count:" + driversArray[i].tasksCount +  " __Cargo: " + driversArray[i].cargo +"<br>----";
                document.getElementById("test3").appendChild(para3[i]);


                var m=0;
                @foreach (var item100 in item.reportId)
                {
                    <text>

                driversArray[i].reportId[m] = @(item100);
                    m++;

                    </text>
                }

                var x=0;
                @foreach (var item2 in item.tasksLat)
                    {
                    <text>

                driversArray[i].tasksLat[x] = @(item2);
                x++;

                </text>
                    }

                var t=0;
                @foreach (var item3 in item.tasksLng)
                    {
                    <text>

                driversArray[i].tasksLng[t] = @(item3);
                t++;

                </text>
                    }


                var e=0;
                @foreach (var item101 in item.tasksLatDest)
                {
                    <text>

                    driversArray[i].tasksDestLat[e] = @(item101);
                    e++;

                </text>
                }

                var h=0;
                @foreach (var item102 in item.tasksLngDest)
                {
                    <text>

                    driversArray[i].tasksDestLng[h] = @(item102);
                    h++;

                    </text>
                }


                var sizeLat = driversArray[i].tasksLat.length;
                var n=0;

                while(n<sizeLat)
                {
                    para4[n] = document.createElement("div");
                    para4[n].innerHTML = driversArray[i].driverId + " __Report ID:" + driversArray[i].reportId[n] + "  task:" + n + "__lat:" + "_"+ driversArray[i].tasksLat[n];
                    document.getElementById("test4").appendChild(para4[n]);
                    n++;
                }

                var sizeLng = driversArray[i].tasksLng.length;
                var b=0;

                while(b<sizeLng)
                {
                    para5[b] = document.createElement("div");
                    para5[b].innerHTML = driversArray[i].driverId  + " __Report ID:" + driversArray[i].reportId[b] +  "  task:" + b + "__lng:" + "_"+ driversArray[i].tasksLng[b];
                    document.getElementById("test5").appendChild(para5[b]);

                    b++;
                }

                var u=0;
                var sizeDest = driversArray[i].tasksDestLng.length;
                while(u<sizeLng)
                {
                    para700[u] = document.createElement("div");
                    para700[u].innerHTML = driversArray[i].driverId  + " __Report ID:" + driversArray[i].reportId[u] +  "  task:" + u + "__Dest lat:" + "_"+ driversArray[i].tasksDestLat[u]+ "__Dest lng:" + "_"+ driversArray[i].tasksDestLng[u];
                    document.getElementById("test9").appendChild(para700[u]);

                    u++;
                }

                i++;

                </text>
            }

                //distances calculation

                var distance = [];   //// distances of each driver from client ////
                var tasksDistanceSum = [];  // for each driver, sum of distance between tasks
                var tasksDistanceSumToClient;  // sum of driver -> tasks -> client

                var j=0;
                var para2 = [];
                var para10 = [];

                while(j<cnt)  //calculate distance between each driver to client & calculate the sum of tasks distances from driver
                {

                    distance[j] = calcDistance(driversArray[j].lan,driversArray[j].lng,clientLat,clientLng)


                    para2[j] = document.createElement("div");
                    para2[j].innerHTML = j + ")" + "Driver id: " + driversArray[j].driverId + "__Distance from client: " + (distance[j]/1000).toFixed(2) + " km  ";
                    document.getElementById("test6").appendChild(para2[j]);

                    var tasksSize = driversArray[j].tasksLat.length;

                    tasksDistanceSum[j]=0; //init
                    if(tasksSize>0 && driversArray[j].tasksLat[0]!=0) // if there are more than 0 tasks, at first, calculate distance from driver to first task
                    {
                        tasksDistanceSum[j] = calcDistance(driversArray[j].lan,driversArray[j].lng,driversArray[j].tasksLat[0],driversArray[j].tasksLng[0]);
                        tasksDistanceSumToClient = tasksDistanceSum[j] + calcDistance(driversArray[j].tasksLat[0],driversArray[j].tasksLng[0],clientLat,clientLng);  //driver -> task 1 -> client

                        if(tasksSize==2 && driversArray[j].tasksLat[1]!=0) // there maybe only 2 tasks registered to a driver. calculate distance between registered tasks
                        {
                            tasksDistanceSum[j] += calcDistance(driversArray[j].tasksLat[0],driversArray[j].tasksLng[0],driversArray[j].tasksLat[1],driversArray[j].tasksLng[1]);
                            tasksDistanceSumToClient = tasksDistanceSum[j] + calcDistance(driversArray[j].tasksLat[1],driversArray[j].tasksLng[1],clientLat,clientLng); //driver -> task 1 -> task 2 -> client
                        }
                    }

                    para10[j] = document.createElement("div");
                    para10[j].innerHTML = j + ")" + "Driver id: " + driversArray[j].driverId + "__tasks dstance sum: " + (tasksDistanceSum[j]/1000).toFixed(2) + " km  " + " __Total distance to client: " + (tasksDistanceSumToClient/1000).toFixed(2);
                    document.getElementById("test7").appendChild(para10[j]);

                    j++;
                }

                var load = "Load";   //init priority role
                var unload = "Unload"; //init priority role
                var i = 0;

                if(cnt==0)  //no available drivers
                {
                    document.getElementById("noDriverFound").style.display = "inline";
                }

                for(i=0;i<cnt;i++)  //Main algorithm loop
                {

                    if(driversArray[i].cargo==0 && driversArray[i].tasksCount==0) //distance only between driver->client
                    {
                        driversArray[i].distanceResult = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng);
                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);

                        driversArray[i].prior1 = clientReportId;
                        driversArray[i].prior1Role = load;
                        driversArray[i].prior2 = clientReportId;
                        driversArray[i].prior2Role = unload;
                    }



                    else if(driversArray[i].cargo==1 && driversArray[i].tasksCount==1) //10km of "fair approach"
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]); // driver->unload
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng) + calcDistance(clientLat,clientLng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]); // driver->client->unload
                        var z = y - x;

                        if(z<0)
                        {
                            z=z*(-1);
                        }

                        z = (z/1000);
                        if(z<=10)  //go to client and than unload
                        {
                            driversArray[i].distanceResult = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng);  // driver->client

                            driversArray[i].prior1 = clientReportId;
                            driversArray[i].prior1Role = load;
                            driversArray[i].prior2 = driversArray[i].reportId[0];
                            driversArray[i].prior2Role = unload;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = unload;

                        }
                        else //go to unload and than to client
                        {
                            driversArray[i].distanceResult = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],clientLat,clientLng)  // driver -> unload -> client

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = unload;
                            driversArray[i].prior2 = clientReportId;
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = unload;

                        }

                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }

                    else if(driversArray[i].cargo==1 && driversArray[i].tasksCount==2)
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],driversArray[i].tasksLat[1],driversArray[i].tasksLng[1]) + calcDistance(driversArray[i].tasksLat[1],driversArray[i].tasksLng[1],clientLat,clientLng);  // driver -> unload 1 -> load 2 -> client
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksLat[1],driversArray[i].tasksLng[1]) + calcDistance(driversArray[i].tasksLat[1],driversArray[i].tasksLng[1],driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]) + calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng); // driver > load 2 -> unload 2 -> client

                        if(x<y)
                        {
                            driversArray[i].distanceResult = x; //driver -> unload 1 -> load 2 -> client

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = unload;
                            driversArray[i].prior2 = driversArray[i].reportId[1];
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = load;
                            driversArray[i].prior4 = driversArray[i].reportId[1];
                            driversArray[i].prior4Role = unload;
                            driversArray[i].prior5 = clientReportId;
                            driversArray[i].prior5Role = unload;

                        }
                        else{
                            driversArray[i].distanceResult = y; // driver > load 2 -> unload 2 -> client

                            driversArray[i].prior1 = driversArray[i].reportId[1];
                            driversArray[i].prior1Role = load;
                            driversArray[i].prior2 = driversArray[i].reportId[1];
                            driversArray[i].prior2Role = unload;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = load;
                            driversArray[i].prior4 = driversArray[i].reportId[0];
                            driversArray[i].prior4Role = unload;
                            driversArray[i].prior5 = clientReportId;
                            driversArray[i].prior5Role = unload;
                        }

                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }


                    else if(driversArray[i].cargo==2 && driversArray[i].tasksCount==2)
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],clientLat,clientLng);  // driver -> unload 1 -> client
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]) + calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng);  // driver -> unload 2 -> client
                        var z = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]) + calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng); // driver -> unload 1 -> unload 2 -> client

                        if(x<y && x<z)
                        {
                            driversArray[i].distanceResult=x; // driver -> unload 1 -> client

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = unload;
                            driversArray[i].prior2 = clientReportId;
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = driversArray[i].reportId[1];
                            driversArray[i].prior3Role = unload;
                            driversArray[i].prior4 = clientReportId;
                            driversArray[i].prior4Role = unload;
                        }
                        else if(y<x && y<z){
                            driversArray[i].distanceResult=y; // driver -> unload 2 -> client

                            driversArray[i].prior1 = driversArray[i].reportId[1];
                            driversArray[i].prior1Role = unload;
                            driversArray[i].prior2 = clientReportId;
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = driversArray[i].reportId[0];
                            driversArray[i].prior3Role = unload;
                            driversArray[i].prior4 = clientReportId;
                            driversArray[i].prior4Role = unload;
                        }
                        else if(z<x && z<y){
                            driversArray[i].distanceResult=z; // driver -> unload 1 -> unload 2 -> client

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = unload;
                            driversArray[i].prior2 = driversArray[i].reportId[1];
                            driversArray[i].prior2Role = unload;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = load;
                            driversArray[i].prior4 = clientReportId;
                            driversArray[i].prior4Role = unload;
                        }

                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }


                    else if(driversArray[i].cargo==0 && driversArray[i].tasksCount==1)
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksLat[0],driversArray[i].tasksLng[0]) + calcDistance(driversArray[i].tasksLat[0],driversArray[i].tasksLng[0],clientLat,clientLng);
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng);
                        var z = y - x;

                        if(z<0)
                        {
                            z=z*(-1);
                        }

                        z=z/1000;   //convert to km

                        if(z<=10){
                            driversArray[i].distanceResult = y;//load client->load task 1

                            driversArray[i].prior1 = clientReportId;
                            driversArray[i].prior1Role = load;
                            driversArray[i].prior2 = driversArray[i].reportId[0];
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = unload;
                            driversArray[i].prior4 = driversArray[i].reportId[0];
                            driversArray[i].prior4Role = unload;
                        }
                        else
                        {
                            driversArray[i].distanceResult = x;//load task 1->load client

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = load;
                            driversArray[i].prior2 = clientReportId;
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = driversArray[i].reportId[0];
                            driversArray[i].prior3Role = unload;
                            driversArray[i].prior4 = clientReportId;
                            driversArray[i].prior4Role = unload;

                        }

                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }


                    else if(driversArray[i].cargo==0 && driversArray[i].tasksCount==2)
                    {
                        var x=calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0])+ calcDistance(driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1])+  calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng);//loadtask1->load task2->load client
                        var y=calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0])+ calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],clientLat,clientLng)+calcDistance(clientLat,clientLng,driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]);//load task1->load client->load task2


                        if(x<y){
                            driversArray[i].distanceResult = x; //loadtask1->load task2->load client

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = load;
                            driversArray[i].prior2 = driversArray[i].reportId[1];
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = clientReportId;
                            driversArray[i].prior3Role = load;
                            driversArray[i].prior4 = driversArray[i].reportId[0];
                            driversArray[i].prior4Role = unload;
                            driversArray[i].prior5 = driversArray[i].reportId[1];
                            driversArray[i].prior5Role = unload;
                            driversArray[i].prior6 = clientReportId;
                            driversArray[i].prior6Role = unload;
                        }
                        else if(x>y){
                            driversArray[i].distanceResult = y; //load task1->load client->load task2

                            driversArray[i].prior1 = driversArray[i].reportId[0];
                            driversArray[i].prior1Role = load;
                            driversArray[i].prior2 = clientReportId;
                            driversArray[i].prior2Role = load;
                            driversArray[i].prior3 = driversArray[i].reportId[1];
                            driversArray[i].prior3Role = load;
                            driversArray[i].prior4 = driversArray[i].reportId[0];
                            driversArray[i].prior4Role = unload;
                            driversArray[i].prior5 = clientReportId;
                            driversArray[i].prior5Role = unload;
                            driversArray[i].prior6 = driversArray[i].reportId[1];
                            driversArray[i].prior6Role = unload;

                        }
                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }


                }

                if(cnt>0) //only if there are drivers
                {
                    var finalDriverId=driversArray[0].driverId;  //init driver id - algorithm result to send to server
                    var finalReportId=driversArray[0].reportId;  //init report id - algorithm result to send to server
                    var finaldistance=driversArray[0].distanceResult;
                    var priority1=driversArray[0].prior1;
                    var priority2=driversArray[0].prior2;
                    var priority3=driversArray[0].prior3;
                    var priority4=driversArray[0].prior4;
                    var priority5=driversArray[0].prior5;
                    var priority6=driversArray[0].prior6;
                    var priority1Role=driversArray[0].prior1Role;
                    var priority2Role=driversArray[0].prior2Role;
                    var priority3Role=driversArray[0].prior3Role;
                    var priority4Role=driversArray[0].prior4Role;
                    var priority5Role=driversArray[0].prior5Role;
                    var priority6Role=driversArray[0].prior6Role;
                    var minDist=driversArray[0].distanceResult;
                }

                var u;


                for(u=0;u<cnt;u++){   //calculate the shortest route from all available  drivers
                    if(minDist>driversArray[u].distanceResult){

                        minDist=driversArray[u].distanceResult;
                        finalDriverId=driversArray[u].driverId;
                        finalReportId=driversArray[u].reportId;
                        finaldistance=driversArray[u].distanceResult;
                        priority1=driversArray[u].prior1;
                        priority2=driversArray[u].prior2;
                        priority3=driversArray[u].prior3;
                        priority4=driversArray[u].prior4;
                        priority5=driversArray[u].prior5;
                        priority6=driversArray[u].prior6;
                        priority1Role=driversArray[u].prior1Role;
                        priority2Role=driversArray[u].prior2Role;
                        priority3Role=driversArray[u].prior3Role;
                        priority4Role=driversArray[u].prior4Role;
                        priority5Role=driversArray[u].prior5Role;
                        priority6Role=driversArray[u].prior6Role;
                    }
                }

                if(cnt>0)
                {
                    var paraAlg1; //print shortest route driver
                    paraAlg1 = document.createElement("div");
                    paraAlg1.innerHTML = "Driver id: " + finalDriverId + "__report: " + finalReportId + " __Total distance to client: " + finaldistance + " km" + "<br>" + " _Chosen priorities:" + priority1 + " Role:" + priority1Role + "," + priority2 + " Role:" +  priority2Role + "," + priority3 + " Role:" +  priority3Role+ "," + priority4 + " Role:" +  priority4Role + "," + priority5 + " Role:" +  priority5Role + "," + priority6 + " Role:" +  priority6Role  + "<br><br>" +"__array[0].distance=" + driversArray[0].distanceResult + "<br>";
                    document.getElementById("testAlg1").appendChild(paraAlg1);
                }
                else{
                    var paraAlg1; //print shortest route driver
                    paraAlg1 = document.createElement("div");
                    paraAlg1.innerHTML = "No available assigning: no drivers.";
                    document.getElementById("testAlg1").appendChild(paraAlg1);
                }


                if(cnt>0){
                    redirectToServer(finalDriverId, finalReportId, finaldistance, priority1, priority2, priority3, priority4, priority5, priority6, priority1Role, priority2Role, priority3Role, priority4Role, priority5Role, priority6Role);
                }
                else{
                    document.getElementById("redirectBack").style.display = "inline";
                }
                


                function calcDistance(fromlat,fromlng,tolat,tolng){  // calculate distance between two locations by lat & lng cordinates
                    var distance = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(fromlat, fromlng), new google.maps.LatLng(tolat, tolng));
                    return distance;
                }

            </script>
        }
        else
        {

            <script>
                document.getElementById("testLngLatClientSide").innerHTML = "ERROR: MODEL = NULL";

                document.getElementById("redirectBack").style.display = "inline";
                document.getElementById("noDriverFound").style.display = "inline";

            </script>

        }


        //coordinates library://
        //karmiel: lat: 32.912957, lng: 35.282209
        //haifa: lat: 32.79405, lng: 34.98957
        //nazereth elit: lat: 32.71154, lng: 35.32481
        //akko: lat: 32.934976899999995, lng: 35.0846818


        //END truck driver assigning algorithm
    }

</div>
