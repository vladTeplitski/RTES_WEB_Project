<script src="~/Scripts/Functions/funcLib.js"></script>
<link href="~/Content/algCSS.css" rel="stylesheet" />

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8jxvHszW9AW7xdcB7Ds-f5PPIRGfhmHw&callback=initMap">
</script>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&v=3&libraries=geometry"></script>

<div class="algContainer">

    <div class="progressBox">
        <div style="cursor:default;padding:10px;color:#F3F3F3">Calculating service requests...</div>
        <div class="loader" style="margin:auto;"></div>
    </div>


    <div id="testLngLatClientSide" style="position:absolute;top:300px;width:700px;height:auto;color:#4AFF12;background-color:black;border:1px solid black;">
        <span style="color:red;"><b>Algorithm debug mode</b></span>
        <br /><br />

        <div id="test1"></div><br />
        <div id="test2"></div><br />
        <div id="test3"></div><br />
        <div id="test4"></div><br />
        <div id="test5"></div><br />
        <div id="test6"></div><br />
        <div id="test7"></div><br />
        <div id="test8"></div><br />
        <div id="test9"></div><br />
        <br /><br />
        <div id="testAlg1"></div><br />
        <div id="testAlg2"></div><br />
        <div id="testAlg3"></div><br />
        <div id="testAlg4"></div><br />

    </div>


    <br />


    @using RTESWebProjectMVC.Models
    @model truckDriverList[]

    @{

        if (Model != null)
        {

            <script>

                var finalDriverId;  //driver id - algorithm result to send to server
                var finalReportId;  //report id - algorithm result to send to server


                var clientLng =  '@(Session["clientLng"])';
                var clientLat = '@(Session["clientLat"])';

                var cnt = '@(Model.Length)'
                var i;

                document.getElementById("test1").innerHTML = "Number of drivers ($cnt) = "+cnt;
                document.getElementById("test2").innerHTML = "<br>"+"Client coordinates: Lng:" + clientLng + " Lat:" + clientLat + "<br><br>";

                var para = [];
                var para3 = [];
                var para4 = [];
                var para5 = [];
                var para700 = [];

                var driversArray = [];  // init an array for objects

                function driverObj() { // init object for storing all drivers' details
                    this.driverId = null;
                    this.lan = null;
                    this.lng = null;
                    this.tasksCount = null;
                    this.cargo = null;
                    this.reportId = [];
                    this.tasksLat = [];
                    this.tasksLng = [];
                    this.tasksDestLat = [];
                    this.tasksDestLng = [];
                    this.distanceResult =null;
                };

                var min=0;
                var truckDriverId;
                var i=0 ;

                @foreach (var item in Model)  // switch to C#
            {
             <text>  // switch to javascript

                driversArray.push(new driverObj()); //create array of objects

                driversArray[i].driverId = @(item.driverId);
                driversArray[i].lan = @(item.lan);
                driversArray[i].lng = @(item.lng);
                driversArray[i].cargo = @(item.cargo);

                driversArray[i].tasksCount = @(item.tasksCount);

                para3[i] = document.createElement("div");
                para3[i].innerHTML = "Driver id:"+i+"_"+ driversArray[i].driverId + "__Driver Lat:" + driversArray[i].lan + "__Driver Lng:" + driversArray[i].lng + "__Tasks Count:" + driversArray[i].tasksCount +  " __Cargo: " + driversArray[i].cargo +"<br>----";
                document.getElementById("test3").appendChild(para3[i]);


                var m=0;
                @foreach (var item100 in item.reportId)
                {
                    <text>

                driversArray[i].reportId[m] = @(item100);
                    m++;

                    </text>
                }

                var x=0;
                @foreach (var item2 in item.tasksLat)
                    {
                    <text>

                driversArray[i].tasksLat[x] = @(item2);
                x++;

                </text>
                    }

                var t=0;
                @foreach (var item3 in item.tasksLng)
                    {
                    <text>

                driversArray[i].tasksLng[t] = @(item3);
                t++;

                </text>
                    }


                var e=0;
                @foreach (var item101 in item.tasksLatDest)
                {
                    <text>

                    driversArray[i].tasksDestLat[e] = @(item101);
                    e++;

                </text>
                }

                var h=0;
                @foreach (var item102 in item.tasksLngDest)
                {
                    <text>

                    driversArray[i].tasksDestLng[h] = @(item102);
                    h++;

                    </text>
                }


                var sizeLat = driversArray[i].tasksLat.length;
                var n=0;

                while(n<sizeLat)
                {
                    para4[n] = document.createElement("div");
                    para4[n].innerHTML = driversArray[i].driverId + " __Report ID:" + driversArray[i].reportId[n] + "  task:" + n + "__lat:" + "_"+ driversArray[i].tasksLat[n];
                    document.getElementById("test4").appendChild(para4[n]);
                    n++;
                }

                var sizeLng = driversArray[i].tasksLng.length;
                var b=0;

                while(b<sizeLng)
                {
                    para5[b] = document.createElement("div");
                    para5[b].innerHTML = driversArray[i].driverId  + " __Report ID:" + driversArray[i].reportId[b] +  "  task:" + b + "__lng:" + "_"+ driversArray[i].tasksLng[b];
                    document.getElementById("test5").appendChild(para5[b]);

                    b++;
                }

                var u=0;
                var sizeDest = driversArray[i].tasksDestLng.length;
                while(u<sizeLng)
                {
                    para700[u] = document.createElement("div");
                    para700[u].innerHTML = driversArray[i].driverId  + " __Report ID:" + driversArray[i].reportId[u] +  "  task:" + u + "__Dest lat:" + "_"+ driversArray[i].tasksDestLat[u]+ "__Dest lng:" + "_"+ driversArray[i].tasksDestLng[u];
                    document.getElementById("test9").appendChild(para700[u]);

                    u++;
                }

                i++;

                </text>
            }

                //distances calculation

                var distance = [];   //// distances of each driver from client ////
                var tasksDistanceSum = [];  // for each driver, sum of distance between tasks
                var tasksDistanceSumToClient;  // sum of driver -> tasks -> client

                var j=0;
                var para2 = [];
                var para10 = [];

                while(j<cnt)  //calculate distance between each driver to client & calculate the sum of tasks distances from driver
                {

                    distance[j] = calcDistance(driversArray[j].lan,driversArray[j].lng,clientLat,clientLng)


                    para2[j] = document.createElement("div");
                    para2[j].innerHTML = j + ")" + "Driver id: " + driversArray[j].driverId + "__Distance from client: " + (distance[j]/1000).toFixed(2) + " km  ";
                    document.getElementById("test6").appendChild(para2[j]);

                    var tasksSize = driversArray[j].tasksLat.length;

                    tasksDistanceSum[j]=0; //init
                    if(tasksSize>0 && driversArray[j].tasksLat[0]!=0) // if there are more than 0 tasks, at first, calculate distance from driver to first task
                    {
                        tasksDistanceSum[j] = calcDistance(driversArray[j].lan,driversArray[j].lng,driversArray[j].tasksLat[0],driversArray[j].tasksLng[0]);
                        tasksDistanceSumToClient = tasksDistanceSum[j] + calcDistance(driversArray[j].tasksLat[0],driversArray[j].tasksLng[0],clientLat,clientLng);  //driver -> task 1 -> client

                        if(tasksSize==2 && driversArray[j].tasksLat[1]!=0) // there maybe only 2 tasks registered to a driver. calculate distance between registered tasks
                        {
                            tasksDistanceSum[j] += calcDistance(driversArray[j].tasksLat[0],driversArray[j].tasksLng[0],driversArray[j].tasksLat[1],driversArray[j].tasksLng[1]);
                            tasksDistanceSumToClient = tasksDistanceSum[j] + calcDistance(driversArray[j].tasksLat[1],driversArray[j].tasksLng[1],clientLat,clientLng); //driver -> task 1 -> task 2 -> client
                        }
                    }

                    para10[j] = document.createElement("div");
                    para10[j].innerHTML = j + ")" + "Driver id: " + driversArray[j].driverId + "__tasks dstance sum: " + (tasksDistanceSum[j]/1000).toFixed(2) + " km  " + " __Total distance to client: " + (tasksDistanceSumToClient/1000).toFixed(2);
                    document.getElementById("test7").appendChild(para10[j]);

                    j++;
                }

                var paraAlg1 = [];
                var i = 0;
                for(i=0;i<cnt;i++)  //Main algorithm loop
                {

                    if(driversArray[i].cargo==0 && driversArray[i].tasksCount==0) //distance only between driver->client
                    {
                        driversArray[i].distanceResult = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng);
                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }



                    else if(driversArray[i].cargo==1 && driversArray[i].tasksCount==1) //10km of "fair approach"
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]); // driver->unload
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng) + calcDistance(clientLat,clientLng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]); // driver->client->unload
                        var z = y - x;

                        if(z<0)
                        {
                            z=z*(-1);
                        }

                        z = (z/1000);
                        if(z<=10)  //go to client and than unload
                        {
                            driversArray[i].distanceResult = calcDistance(driversArray[i].lan,driversArray[i].lng,clientLat,clientLng);  // driver->client
                        }
                        else //go to unload and than to client
                        {
                            driversArray[i].distanceResult = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],clientLat,clientLng)  // driver -> unload -> client
                        }

                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }




                    else if(driversArray[i].cargo==1 && driversArray[i].tasksCount==2)
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],driversArray[i].tasksLat[1],driversArray[i].tasksLng[1]) + calcDistance(driversArray[i].tasksLat[1],driversArray[i].tasksLng[1],clientLat,clientLng);  // driver -> unload 1 -> load 2 -> client
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksLat[1],driversArray[i].tasksLng[1]) + calcDistance(driversArray[i].tasksLat[1],driversArray[i].tasksLng[1],driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]) + calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng); // driver > load 2 -> unload 2 -> client
                        
                        if(x<y)
                        {
                            driversArray[i].distanceResult = x;
                        }
                        else{
                            driversArray[i].distanceResult = y;
                        }

                        driversArray[i].distanceResult =((driversArray[i].distanceResult)/1000).toFixed(2);
                    }






                    else if(driversArray[i].cargo==2 && driversArray[i].tasksCount==2)
                    {
                        var x = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],clientLat,clientLng);  // driver -> unload 1 -> client
                        var y = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]) + calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng);  // driver -> unload 2 -> client
                        var z = calcDistance(driversArray[i].lan,driversArray[i].lng,driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0]) + calcDistance(driversArray[i].tasksDestLat[0],driversArray[i].tasksDestLng[0],driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1]) + calcDistance(driversArray[i].tasksDestLat[1],driversArray[i].tasksDestLng[1],clientLat,clientLng); // driver -> unload 1 -> unload 2 -> client
                    
                    }





                    else if(driversArray[i].cargo==0 && driversArray[i].tasksCount==1)
                    {

                    }





                    else if(driversArray[i].cargo==0 && driversArray[i].tasksCount==2)
                    {

                    }


                }









                function calcDistance(fromlat,fromlng,tolat,tolng){  // calculate distance between two locations by lat & lng cordinates
                    var distance = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(fromlat, fromlng), new google.maps.LatLng(tolat, tolng));
                    return distance;
                }

                function redirectToServer() { //send results to server side & redirect to main client view when algorithm done

                    $.ajax({
                        url: '/client/algorithmFunc',
                        type: 'POST',
                        data: { driverId: finalDriverId, reportId: finalReportId },
                        success: function (data) {
                            alert("Tow truck driver assigned successfully!");
                        },
                        error: function () {
                            alert("Error: bufferView - Server ajax comunication failed.");
                        }
                    });

                }



            </script>
        }
        else
        {

            <script>
                document.getElementById("testLngLatClientSide").innerHTML = "ERROR: MODEL NULL";

            </script>

        }


        //coordinates library://
        //karmiel: lat: 32.912957, lng: 35.282209
        //haifa: lat: 32.79405, lng: 34.98957
        //nazereth elit: lat: 32.71154, lng: 35.32481
        //akko: lat: 32.934976899999995, lng: 35.0846818


        //END algorithm
    }




</div>
